// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	request "github.com/mproyyan/go-simple-restful/http/request"

	response "github.com/mproyyan/go-simple-restful/http/response"
)

// ProductServiceContract is an autogenerated mock type for the ProductServiceContract type
type ProductServiceContract struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *ProductServiceContract) Create(ctx context.Context, _a1 request.ProductCreateRequest) response.ProductResponse {
	ret := _m.Called(ctx, _a1)

	var r0 response.ProductResponse
	if rf, ok := ret.Get(0).(func(context.Context, request.ProductCreateRequest) response.ProductResponse); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(response.ProductResponse)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, productId
func (_m *ProductServiceContract) Delete(ctx context.Context, productId int) bool {
	ret := _m.Called(ctx, productId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, int) bool); ok {
		r0 = rf(ctx, productId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Find provides a mock function with given fields: ctx, productId
func (_m *ProductServiceContract) Find(ctx context.Context, productId int) response.ProductResponse {
	ret := _m.Called(ctx, productId)

	var r0 response.ProductResponse
	if rf, ok := ret.Get(0).(func(context.Context, int) response.ProductResponse); ok {
		r0 = rf(ctx, productId)
	} else {
		r0 = ret.Get(0).(response.ProductResponse)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx
func (_m *ProductServiceContract) FindAll(ctx context.Context) []response.ProductResponse {
	ret := _m.Called(ctx)

	var r0 []response.ProductResponse
	if rf, ok := ret.Get(0).(func(context.Context) []response.ProductResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.ProductResponse)
		}
	}

	return r0
}

// Update provides a mock function with given fields: ctx, _a1
func (_m *ProductServiceContract) Update(ctx context.Context, _a1 request.ProductUpdateRequest) response.ProductResponse {
	ret := _m.Called(ctx, _a1)

	var r0 response.ProductResponse
	if rf, ok := ret.Get(0).(func(context.Context, request.ProductUpdateRequest) response.ProductResponse); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(response.ProductResponse)
	}

	return r0
}

type mockConstructorTestingTNewProductServiceContract interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductServiceContract creates a new instance of ProductServiceContract. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductServiceContract(t mockConstructorTestingTNewProductServiceContract) *ProductServiceContract {
	mock := &ProductServiceContract{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
