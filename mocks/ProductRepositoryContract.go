// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/mproyyan/go-simple-restful/model"

	sql "database/sql"
)

// ProductRepositoryContract is an autogenerated mock type for the ProductRepositoryContract type
type ProductRepositoryContract struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, tx, product
func (_m *ProductRepositoryContract) Delete(ctx context.Context, tx *sql.Tx, product model.Product) bool {
	ret := _m.Called(ctx, tx, product)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, model.Product) bool); ok {
		r0 = rf(ctx, tx, product)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Find provides a mock function with given fields: ctx, tx, productId
func (_m *ProductRepositoryContract) Find(ctx context.Context, tx *sql.Tx, productId int) (model.Product, error) {
	ret := _m.Called(ctx, tx, productId)

	var r0 model.Product
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int) model.Product); ok {
		r0 = rf(ctx, tx, productId)
	} else {
		r0 = ret.Get(0).(model.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, int) error); ok {
		r1 = rf(ctx, tx, productId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: ctx, tx
func (_m *ProductRepositoryContract) FindAll(ctx context.Context, tx *sql.Tx) []model.Product {
	ret := _m.Called(ctx, tx)

	var r0 []model.Product
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx) []model.Product); ok {
		r0 = rf(ctx, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Product)
		}
	}

	return r0
}

// Save provides a mock function with given fields: ctx, tx, product
func (_m *ProductRepositoryContract) Save(ctx context.Context, tx *sql.Tx, product model.Product) model.Product {
	ret := _m.Called(ctx, tx, product)

	var r0 model.Product
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, model.Product) model.Product); ok {
		r0 = rf(ctx, tx, product)
	} else {
		r0 = ret.Get(0).(model.Product)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, tx, product
func (_m *ProductRepositoryContract) Update(ctx context.Context, tx *sql.Tx, product model.Product) model.Product {
	ret := _m.Called(ctx, tx, product)

	var r0 model.Product
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, model.Product) model.Product); ok {
		r0 = rf(ctx, tx, product)
	} else {
		r0 = ret.Get(0).(model.Product)
	}

	return r0
}

type mockConstructorTestingTNewProductRepositoryContract interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductRepositoryContract creates a new instance of ProductRepositoryContract. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductRepositoryContract(t mockConstructorTestingTNewProductRepositoryContract) *ProductRepositoryContract {
	mock := &ProductRepositoryContract{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
